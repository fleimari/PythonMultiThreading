https://github.com/t3kala01/PythonMultiThreading

Lasse Kangas / t3kala01


""""
Exercise 1.

Write a Python program that creates thread instance of function hello_world()
that prints out the text "Hello World" four times to console and also prints
out to the console the number of the thread printing the text.

The console output should look like following:

Hello World: 0
Hello World: 2
Hello World: 1
Hello World: 3
"""
import threading

def helloWorld(i):
    print("Hello world from thread {}".format(i))


for i in range(4):
    thread = threading.Thread(target=helloWorld, args=(i,))
    thread.start()

print("Completed!")

----------------------------------------------------------------------------------------------------------------------------

""""
Exercise 2.

Write similar program than in exercise 1 but this time use
subclass of Thread of threding module and hello_world() -function
printing the text should be member function (method) of class you created.
The console output should look similar than in exercise 1.

Hello World: 0
Hello World: 2
Hello World: 1
Hello World: 3
"""
import threading

class MyThread(threading.Thread):

    def __init__(self, name):
        threading.Thread.__init__(self)
        self.name = name

    def run(self):
        print("Hello world from thread", self.name, "!")

thread0 = MyThread("0")
thread1 = MyThread("1")
thread2 = MyThread("2")
thread3 = MyThread("3")

thread0.start()
thread1.start()
thread2.start()
thread3.start()

thread0.join()
thread1.join()
thread2.join()
thread3.join()

print("Completed")
---------------------------------------------------------------------------------------------------------------------------

"""Exercise 3.

Write a Python program that has separate function (method) that increases a value of 
global variable count and prints the text "Hello World". The program must have a separate 
main() function that starts the execution of threads and it must have at least two separate threads. 
The thread should be implemented as separate function hello_world() and when program is run, 
the printing of value should be in increasing order (i.e. 1, 2, 3, 4) no matter how many 
instances of the thread hello_world() are started simultaneously in main function. 
(hint you must use some method of synchronization i.e. Lock, Semaphore, Monitor etc.) 
The console output should look similar than in exercise 1 but you may add some features 
to console output that show the state of execution i.e.:

Inside hello_world()
Lock Acquired
Hello World: 1
Inside hello_world()
Lock Acquired
Hello World: 2
"""

import threading
import time

counter = 0                     #Global variable

class MyClass(threading.Thread):

    def __init__(self, name):
        threading.Thread.__init__(self)

        self.name = name

    def run(self):
        threadLock.acquire()
        print("Thread locked!")
        time.sleep(0.2)

        print("Hello thread:", self.name)
        time.sleep(1)

        threadLock.release()
        print("Thread released!")
        time.sleep(0.2)

threadLock = threading.Lock()

while counter < 10:             #Loop second thread in main thread
    thread = MyClass(counter)
    thread.start()
    counter = counter + 1
    thread.join()

print("Completed")
